package htwberlin.backend.dbmethods;

import htwberlin.backend.data.ItemSet;
import org.assertj.core.api.WithAssertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.*;


//ItemSet could also be mocked, since primaryKey would normally be generated by JPA/Hibernate.
@ExtendWith(MockitoExtension.class)
class ItemSetServiceTest implements WithAssertions {

    @Mock
    ItemSetRepository repo;
    @InjectMocks
    ItemSetService service;


    //Tests get, in the case of an ItemSet existing with a given primary key, as well as for a primary key, that doesn't
    //have an ItemSet. Could also work by checking if a returned Optional of notPresent, and checking if it's empty.
    @Test
    @DisplayName("Test 8; Test get method")
    void testGet() {
        var set1 = new ItemSet();
        Long primKey = 19L;
        set1.setPrimKey(19L);
        Long notPresentPrimKey = 23L;

        doReturn(Optional.empty()).when(repo).findById(notPresentPrimKey);
        doReturn(Optional.of(set1)).when(repo).findById(primKey);
        ItemSet notPresent = service.get(notPresentPrimKey);
        ItemSet present = service.get(primKey);
        assertEquals(present.getPrimKey(), primKey);
        assertNull(notPresent);
        verify(repo, times(2)).findById(any());
    }


    @Test
    @DisplayName("Test 9; Test getAll method")
    void testGetAll() {

        ItemSet set1 = new ItemSet();
        ItemSet set2 = new ItemSet();
        ItemSet set3 = new ItemSet();
        set1.setPrimKey(29L);
        set2.setPrimKey(31L);
        set3.setPrimKey(37L);
        List<ItemSet> setList = new ArrayList<>();
        Collections.addAll(setList, set1, set2, set3);

        doReturn(setList).when(repo).findAll();
        List<ItemSet> returnedList = service.getAll();
        assertEquals(returnedList.size(), setList.size());
        verify(repo, times(1)).findAll();

    }

    @Test
    @DisplayName("Test 10; Test deleteById method")
    void testDeleteById() {

        Long primKey = 41L;
        doReturn(true).when(repo).existsById(primKey);

        boolean result = service.deleteById(primKey);
        assertThat(result).isTrue();
        verify(repo, times(1)).deleteById(primKey);
    }

    @Test
    @DisplayName("Test 11; Test deleteById method if item doesn't exist")
    void testDeleteByIdNotPresent() {

        Long primKey = 43L;
        doReturn(false).when(repo).existsById(primKey);

        boolean result = service.deleteById(primKey);
        assertThat(result).isFalse();
        verify(repo, times(0)).deleteById(primKey);
    }


    //Tests save method, but the method itself does no real input validation.
    @Test
    @DisplayName("Test 12; Test Save method")
    void testSave() {
        ItemSet set1 = new ItemSet();
        set1.setPrimKey(47L);
        set1.setTitle("TestSet1");
        set1.setAssociatedMaps(List.of(11, 12));
        doReturn(set1).when(repo).save(set1);
        assertEquals(service.save(set1), set1);
        verify(repo, times(1)).save(set1);
    }

}
